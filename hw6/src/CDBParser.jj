options {    BUILD_PARSER=true;    IGNORE_CASE=true;    DEBUG_TOKEN_MANAGER=false;}PARSER_BEGIN(CDBParser)import java.io.*;
public class CDBParser{  public static void main(String[] args) throws ParseException  {  	 if(args.length == 1){        System.out.println ("CDBParser: Reading the file " + args[0] + " ..." );        try {         Reader r = new FileReader(args[0]);         SimpleCharStream scs = new SimpleCharStream(r);		 CDBParser p = new CDBParser(scs);                 while (p.getNextToken().kind != EOF) {}        }        catch(java.io.FileNotFoundException e) {          System.out.println ("CDBParser: The file " + args[0] + " was not found.");          return;        }      }	}}PARSER_END(CDBParser)//skip whitespaceSKIP:{	" " | "\t" | "\n" | "\r" | "\f"}//skip # single-line commentsSKIP:{  <SINGLE_LINE_COMMENT : "#" (~["\n","\r"])* ("\r" | "\n" | "\r\n") >} //skip multi-line c style commentsMORE : {  "/*" : IN_MULTI_LINE_COMMENT}<IN_MULTI_LINE_COMMENT>MORE : {  < ~[] >}<IN_MULTI_LINE_COMMENT>SPECIAL_TOKEN : {  <MULTI_LINE_COMMENT: "*/"> : DEFAULT}//integer number tokenTOKEN:{	<DECIMAL_NUMBER: (["1"-"9"] (["0"-"9"])*)>}//real number tokenTOKEN:{	<REAL_NUMBER:    ((<DIGITS>)? (".") <DIGITS>)>  	| <#DIGITS: (["0"-"9"])+>}//string tokenTOKEN:{  //single quote string and double quote  <STRING_LITERAL: <DOUBLE_QUOTE>(~["\n", "\r"])*<DOUBLE_QUOTE>| <SINGLE_QUOTE>(~["\n", "\r"])*<SINGLE_QUOTE>>  }//special symbol tokensTOKEN:{  <SINGLE_QUOTE: "\'">| <DOUBLE_QUOTE: "\"">| <STAR: "*" >| <SEMICOLON: ";">}//operator tokensTOKEN:{  <EQUALS: "="> | <NOT_EQUALS: "<>"> | <GREATER_THAN: ">">| <LESS_THAN: "<">| <GREATER_EQUALS:">=">| <LESS_EQUALS:"<=">| <BETWEEN:"BETWEEN">| <LIKE:"LIKE">    | <IN:"IN">| <IS:"IS">| <NOT:"NOT">  }//conditional tokensTOKEN:{  <CASE: "CASE"> | <WHEN: "WHEN">| <THEN: "THEN">| <ELSE: "ELSE">| <END:	"END">}//query tokensTOKEN:{  <SELECT: "SELECT"> | <UPDATE: "UPDATE">| <DROP: "DROP">| <CREATE: "CREATE">| <ALTER: "ALTER">| <INSERT: "INSERT">}
