/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. cdb.jj */
/*@egen*/options {
                                  
    IGNORE_CASE=true;
}

PARSER_BEGIN(CDB)
import java.io.*;

public class CDB/*@bgen(jjtree)*/implements CDBTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTCDBState jjtree = new JJTCDBState();

/*@egen*/
	private static final String SOURCE_SUFFIX = ".cdb";
    private static final String OUTPUT_SUFFIX = ".j";
  
  public static void main(String[] args)
  	throws Exception
  {
	String sourceFilePath = args[0];
    int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
    int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
    String objectFilePath = (suffixIndex == truncatedLength)
        ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
        : sourceFilePath + OUTPUT_SUFFIX;

    Reader reader = new FileReader(sourceFilePath);
    CDB calc = new CDB(reader);
    
    try {
      SimpleNode node = calc.program();
      node.dump(">");
    } 
    catch (ParseException ex) {
      ex.printStackTrace();
    }
  }
}
PARSER_END(CDB)

SKIP: {
    " " | "\r" | "\t" | "\n"
}

SKIP:
{
  <SINGLE_LINE_COMMENT : "//" (~["\n","\r"])* ("\r" | "\n" | "\r\n") >
} 

//skip multi-line comments
MORE : {
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
MORE : {
  < ~[] >
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
  <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

TOKEN: { /* Reserved words */
    <BEGIN     : "BEGIN">
  | <END       : "END">
  | <PROGRAM   : "PROGRAM">
  | <VAR       : "VAR">
  | <IF        : "IF">
  | <ELSE      : "ELSE">
  | <TRUE      : "TRUE">
  | <FALSE     : "FALSE">
  | <WHILE     : "WHILE">
  | <FOR       : "FOR">
  | <DO        : "DO">
  | <INSERT    : "INSERT">
  | <INTO      : "INTO">
  | <VALUES    : "VALUES">
  | <CREATE    : "CREATE">
  | <REMOVE    : "REMOVE">
  | <SELECT    : "SELECT">
  | <STRING    : "STRING">
  | <INT       : "INT">
  | <REAL      : "REAL">
  | <BOOLEAN   : "BOOLEAN">
}

TOKEN: /* Special symbols */
{
    <COLON        : ":">
  | <EQUALS       : "=">
  | <EE           : "==">
  | <NE           : "!=">
  | <LT           : "<">
  | <LE           : "<=">
  | <GT           : ">">
  | <GE           : ">=">
  | <COMMA        : ",">
  | <DOT          : ".">
  | <SEMICOLON    : ";">
  | <PLUS         : "+">
  | <MINUS        : "-">
  | <STAR         : "*">
  | <SLASH        : "/">
  | <QUOTE        : "'">
  | <DOUBLE_QUOTE : "\"">
  | <LEFT_PAREN   : "(">
  | <RIGHT_PAREN  : ")">
  | <LEFT_BRACE   : "{">
  | <RIGHT_BRACE  : "}">   
  | <AND          : "&&">
  | <OR           : "||">
}

TOKEN: { /* Identifiers, strings, and numbers */
    <IDENTIFIER : <LETTER>(<LETTER>|<DIGIT>)*>
  | <STRING_LIT : <DOUBLE_QUOTE>(~["\""])*<DOUBLE_QUOTE>>

  | <INT_LIT    : <UNSIGNED_NUMBER>>
  | <REAL_LIT   : <WHOLE><FRACTION><EXPONENT>
             | <WHOLE><FRACTION>
             | <WHOLE><EXPONENT>>

  | <#LETTER : ["a"-"z", "A"-"Z"]>
  | <#DIGIT  : ["0"-"9"]>
  | <#SIGN   : ["+", "-"]>

  | <#UNSIGNED_NUMBER : (<DIGIT>)+>
  | <#WHOLE           : <UNSIGNED_NUMBER>>
  | <#FRACTION        : "." <UNSIGNED_NUMBER>>
  | <#EXPONENT        : "E"(<SIGN>)?<UNSIGNED_NUMBER>>
}

TOKEN: { /*	Error token */
    <ERROR : ~["\r", "\n"]>
}

SimpleNode program() : {/*@bgen(jjtree) program */
                        SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/SimpleNode rootNode;}
{/*@bgen(jjtree) program */
    try {
/*@egen*/
    rootNode = compoundStatement()
    < EOF >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return rootNode; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode compoundStatement() : {/*@bgen(jjtree) compoundStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) compoundStatement */
    try {
/*@egen*/
    [
        statement()
        (
            statement()
        )*
    ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement()       : {}
{
       loop()
     | ifStatement()
     | declarationStatement() <SEMICOLON>
     | assignmentStatement() <SEMICOLON>
}

void loop()       : {}
{
	  whileLoop()
	| forLoop()
	| doLoop()
}

void whileLoop() : {/*@bgen(jjtree) whileLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) whileLoop */
  try {
/*@egen*/  <WHILE> <LEFT_PAREN> expression() <RIGHT_PAREN>
  (
	  <LEFT_BRACE> compoundStatement() <RIGHT_BRACE>
	| statement()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forLoop() : {/*@bgen(jjtree) forLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forLoop */
  try {
/*@egen*/  <FOR>
  <LEFT_PAREN>
  (assignmentStatement())?
  <SEMICOLON>
  (expression())?
  <SEMICOLON>
  (assignmentStatement())?
  <RIGHT_PAREN>
  (
	  <LEFT_BRACE> compoundStatement() <RIGHT_BRACE>
	| statement()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void doLoop() : {/*@bgen(jjtree) doLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) doLoop */
        try {
/*@egen*/	<DO>
	(
	  <LEFT_BRACE> compoundStatement() <RIGHT_BRACE>
	| statement()
    )
    <WHILE> <LEFT_PAREN> expression() <RIGHT_PAREN> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ifStatement() : {/*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifStatement */
        try {
/*@egen*/	<IF> <LEFT_PAREN> expression() <RIGHT_PAREN>
	(	  <LEFT_BRACE> compoundStatement() <RIGHT_BRACE>
	| statement()
    )
    ( LOOKAHEAD(1) <ELSE> (
		  <LEFT_BRACE> compoundStatement() <RIGHT_BRACE>
		| statement()
    ))?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void declarationStatement()       : {Token t, s;}
{
  (    s = < INT > t = <IDENTIFIER> { System.out.println(s + ": " + t.image);}
  | s = < REAL > t = <IDENTIFIER> { System.out.println(s + ": " + t.image);}
  | s = < BOOLEAN > t = <IDENTIFIER> { System.out.println(s + ": " + t.image);}
  | s = < STRING > t = <IDENTIFIER> { System.out.println(s + ": " + t.image);}
  )
    (	  <COMMA> t = <IDENTIFIER>  { System.out.println(s + ": " + t.image);}
	)*
}

void assignmentStatement() : {/*@bgen(jjtree) assignmentStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignmentStatement */
    try {
/*@egen*/
    variable()
    <EQUALS>
    expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expression()       : {}
{	simpleExpression() (
		<EE>/*@bgen(jjtree) #EE( 2) */
                     {
                       SimpleNode jjtn001 = new SimpleNode(JJTEE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/       
      | <NE>/*@bgen(jjtree) #NE( 2) */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTNE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
             }
/*@egen*/       
      | <LT>/*@bgen(jjtree) #LT( 2) */
             {
               SimpleNode jjtn003 = new SimpleNode(JJTLT);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
             }
/*@egen*/       
      | <LE>/*@bgen(jjtree) #LE( 2) */
             {
               SimpleNode jjtn004 = new SimpleNode(JJTLE);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004,  2);
               }
             }
/*@egen*/       
      | <GT>/*@bgen(jjtree) #GT( 2) */
             {
               SimpleNode jjtn005 = new SimpleNode(JJTGT);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 throw (RuntimeException)jjte005;
               }
               if (jjte005 instanceof ParseException) {
                 throw (ParseException)jjte005;
               }
               throw (Error)jjte005;
             } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005,  2);
               }
             }
/*@egen*/       
      | <GE>/*@bgen(jjtree) #GE( 2) */
             {
               SimpleNode jjtn006 = new SimpleNode(JJTGE);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
             }
             try {
/*@egen*/ simpleExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte006) {
               if (jjtc006) {
                 jjtree.clearNodeScope(jjtn006);
                 jjtc006 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte006 instanceof RuntimeException) {
                 throw (RuntimeException)jjte006;
               }
               if (jjte006 instanceof ParseException) {
                 throw (ParseException)jjte006;
               }
               throw (Error)jjte006;
             } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006,  2);
               }
             }
/*@egen*/       
	)?
}

void simpleExpression()       : {}
{
    term() (
        "+"/*@bgen(jjtree) #add( 2) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTADD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ term()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/        
      | "-"/*@bgen(jjtree) #subtract( 2) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTSUBTRACT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ term()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/             
      | <OR>/*@bgen(jjtree) #or( 2) */
             {
               SimpleNode jjtn003 = new SimpleNode(JJTOR);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*/ term()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
             }
/*@egen*/       
    )*
}

void term()       : {}
{
    factor() (
        "*"/*@bgen(jjtree) #multiply( 2) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLY);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/             
      | "/"/*@bgen(jjtree) #divide( 2) */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTDIVIDE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/           
      | <AND>/*@bgen(jjtree) #and( 2) */
              {
                SimpleNode jjtn003 = new SimpleNode(JJTAND);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/ factor()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
              }
/*@egen*/        
    )*     
}

void factor()       : {}
{
  (     variable()
	  | integerConstant()
	  | realConstant()
	  | stringConstant()
	  | booleanConstant()
      | "-"/*@bgen(jjtree) #negate( 1) */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTNEGATE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
            }
/*@egen*/           
      | "(" expression() ")" 
  )
}

void variable() : {/*@bgen(jjtree) variable */
                   SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) variable */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void integerConstant() : {/*@bgen(jjtree) integerConstant */
                          SimpleNode jjtn000 = new SimpleNode(JJTINTEGERCONSTANT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) integerConstant */
  try {
/*@egen*/  t = <INT_LIT>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void realConstant() : {/*@bgen(jjtree) realConstant */
                       SimpleNode jjtn000 = new SimpleNode(JJTREALCONSTANT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) realConstant */
    try {
/*@egen*/
    t = <REAL_LIT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void booleanConstant() : {/*@bgen(jjtree) booleanConstant */
                          SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANCONSTANT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) booleanConstant */
          try {
/*@egen*/	  t = <TRUE>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.setImage(t.image);}
	| t = <FALSE>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void stringConstant() : {/*@bgen(jjtree) stringConstant */
                         SimpleNode jjtn000 = new SimpleNode(JJTSTRINGCONSTANT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) stringConstant */
        try {
/*@egen*/	t = <STRING_LIT>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void Error()       : {}
{
    <ERROR>
}
