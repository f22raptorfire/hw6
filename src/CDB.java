/* Generated By:JJTree&JavaCC: Do not edit this line. CDB.java */
import java.io.*;

public class CDB/*@bgen(jjtree)*/implements CDBTreeConstants, CDBConstants {/*@bgen(jjtree)*/
  protected static JJTCDBState jjtree = new JJTCDBState();private static final String SOURCE_SUFFIX = ".cdb";
    private static final String OUTPUT_SUFFIX = ".j";

  public static void main(String[] args)
        throws Exception
  {
        String sourceFilePath = args[0];
    int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
    int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
    String objectFilePath = (suffixIndex == truncatedLength)
        ? sourceFilePath.substring(0, truncatedLength) + OUTPUT_SUFFIX
        : sourceFilePath + OUTPUT_SUFFIX;

    Reader reader = new FileReader(sourceFilePath);
    CDB calc = new CDB(reader);

    try {
      SimpleNode node = calc.program();
      node.dump(">");
    }
    catch (ParseException ex) {
      ex.printStackTrace();
    }
  }

  static final public SimpleNode program() throws ParseException {
                        /*@bgen(jjtree) program */
                        SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);SimpleNode rootNode;
    try {
      rootNode = compoundStatement();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return rootNode;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public SimpleNode compoundStatement() throws ParseException {
                                  /*@bgen(jjtree) compoundStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case DO:
      case STRING:
      case INT:
      case REAL:
      case BOOLEAN:
      case IDENTIFIER:
        statement();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case FOR:
          case DO:
          case STRING:
          case INT:
          case REAL:
          case BOOLEAN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          statement();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
    case FOR:
    case DO:
      loop();
      break;
    case IF:
      ifStatement();
      break;
    case STRING:
    case INT:
    case REAL:
    case BOOLEAN:
      declarationStatement();
      jj_consume_token(SEMICOLON);
      break;
    case IDENTIFIER:
      assignmentStatement();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void loop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      whileLoop();
      break;
    case FOR:
      forLoop();
      break;
    case DO:
      doLoop();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void whileLoop() throws ParseException {
                    /*@bgen(jjtree) whileLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LEFT_PAREN);
      expression();
      jj_consume_token(RIGHT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
        jj_consume_token(LEFT_BRACE);
        compoundStatement();
        jj_consume_token(RIGHT_BRACE);
        break;
      case IF:
      case WHILE:
      case FOR:
      case DO:
      case STRING:
      case INT:
      case REAL:
      case BOOLEAN:
      case IDENTIFIER:
        statement();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void forLoop() throws ParseException {
                  /*@bgen(jjtree) forLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LEFT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        assignmentStatement();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case MINUS:
      case LEFT_PAREN:
      case IDENTIFIER:
      case STRING_LIT:
      case INT_LIT:
      case REAL_LIT:
        expression();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        assignmentStatement();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
        jj_consume_token(LEFT_BRACE);
        compoundStatement();
        jj_consume_token(RIGHT_BRACE);
        break;
      case IF:
      case WHILE:
      case FOR:
      case DO:
      case STRING:
      case INT:
      case REAL:
      case BOOLEAN:
      case IDENTIFIER:
        statement();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void doLoop() throws ParseException {
                 /*@bgen(jjtree) doLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
        jj_consume_token(LEFT_BRACE);
        compoundStatement();
        jj_consume_token(RIGHT_BRACE);
        break;
      case IF:
      case WHILE:
      case FOR:
      case DO:
      case STRING:
      case INT:
      case REAL:
      case BOOLEAN:
      case IDENTIFIER:
        statement();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(WHILE);
      jj_consume_token(LEFT_PAREN);
      expression();
      jj_consume_token(RIGHT_PAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ifStatement() throws ParseException {
                      /*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LEFT_PAREN);
      expression();
      jj_consume_token(RIGHT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
        jj_consume_token(LEFT_BRACE);
        compoundStatement();
        jj_consume_token(RIGHT_BRACE);
        break;
      case IF:
      case WHILE:
      case FOR:
      case DO:
      case STRING:
      case INT:
      case REAL:
      case BOOLEAN:
      case IDENTIFIER:
        statement();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACE:
          jj_consume_token(LEFT_BRACE);
          compoundStatement();
          jj_consume_token(RIGHT_BRACE);
          break;
        case IF:
        case WHILE:
        case FOR:
        case DO:
        case STRING:
        case INT:
        case REAL:
        case BOOLEAN:
        case IDENTIFIER:
          statement();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void declarationStatement() throws ParseException {
                                     Token t, s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      s = jj_consume_token(INT);
      t = jj_consume_token(IDENTIFIER);
                                   System.out.println(s + ": " + t.image);
      break;
    case REAL:
      s = jj_consume_token(REAL);
      t = jj_consume_token(IDENTIFIER);
                                    System.out.println(s + ": " + t.image);
      break;
    case BOOLEAN:
      s = jj_consume_token(BOOLEAN);
      t = jj_consume_token(IDENTIFIER);
                                       System.out.println(s + ": " + t.image);
      break;
    case STRING:
      s = jj_consume_token(STRING);
      t = jj_consume_token(IDENTIFIER);
                                      System.out.println(s + ": " + t.image);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
                                      System.out.println(s + ": " + t.image);
    }
  }

  static final public void assignmentStatement() throws ParseException {
                              /*@bgen(jjtree) assignmentStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(EQUALS);
      expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void expression() throws ParseException {
    simpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EE:
    case NE:
    case LT:
    case LE:
    case GT:
    case GE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EE:
        jj_consume_token(EE);
                       SimpleNode jjtn001 = new SimpleNode(JJTEE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
        try {
          simpleExpression();
        } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
        } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
        }
        break;
      case NE:
        jj_consume_token(NE);
               SimpleNode jjtn002 = new SimpleNode(JJTNE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
        try {
          simpleExpression();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
        }
        break;
      case LT:
        jj_consume_token(LT);
               SimpleNode jjtn003 = new SimpleNode(JJTLT);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
        try {
          simpleExpression();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
        }
        break;
      case LE:
        jj_consume_token(LE);
               SimpleNode jjtn004 = new SimpleNode(JJTLE);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
        try {
          simpleExpression();
        } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte004;}
               }
               if (jjte004 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte004;}
               }
               {if (true) throw (Error)jjte004;}
        } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004,  2);
               }
        }
        break;
      case GT:
        jj_consume_token(GT);
               SimpleNode jjtn005 = new SimpleNode(JJTGT);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
        try {
          simpleExpression();
        } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte005;}
               }
               if (jjte005 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte005;}
               }
               {if (true) throw (Error)jjte005;}
        } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005,  2);
               }
        }
        break;
      case GE:
        jj_consume_token(GE);
               SimpleNode jjtn006 = new SimpleNode(JJTGE);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
        try {
          simpleExpression();
        } catch (Throwable jjte006) {
               if (jjtc006) {
                 jjtree.clearNodeScope(jjtn006);
                 jjtc006 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte006 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte006;}
               }
               if (jjte006 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte006;}
               }
               {if (true) throw (Error)jjte006;}
        } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006,  2);
               }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void simpleExpression() throws ParseException {
    term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
              SimpleNode jjtn001 = new SimpleNode(JJTADD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          term();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
              SimpleNode jjtn002 = new SimpleNode(JJTSUBTRACT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
        try {
          term();
        } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
        }
        break;
      case OR:
        jj_consume_token(OR);
               SimpleNode jjtn003 = new SimpleNode(JJTOR);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
        try {
          term();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void term() throws ParseException {
    factor();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case AND:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
              SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLY);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          factor();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
        break;
      case SLASH:
        jj_consume_token(SLASH);
              SimpleNode jjtn002 = new SimpleNode(JJTDIVIDE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
        try {
          factor();
        } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
        }
        break;
      case AND:
        jj_consume_token(AND);
                SimpleNode jjtn003 = new SimpleNode(JJTAND);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
        try {
          factor();
        } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte003;}
                }
                if (jjte003 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte003;}
                }
                {if (true) throw (Error)jjte003;}
        } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      variable();
      break;
    case INT_LIT:
      integerConstant();
      break;
    case REAL_LIT:
      realConstant();
      break;
    case STRING_LIT:
      stringConstant();
      break;
    case TRUE:
    case FALSE:
      booleanConstant();
      break;
    case MINUS:
      jj_consume_token(MINUS);
              SimpleNode jjtn001 = new SimpleNode(JJTNEGATE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        factor();
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
      }
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      expression();
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void variable() throws ParseException {
                   /*@bgen(jjtree) variable */
                   SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setImage(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void integerConstant() throws ParseException {
                          /*@bgen(jjtree) integerConstant */
                          SimpleNode jjtn000 = new SimpleNode(JJTINTEGERCONSTANT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INT_LIT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setImage(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void realConstant() throws ParseException {
                       /*@bgen(jjtree) realConstant */
                       SimpleNode jjtn000 = new SimpleNode(JJTREALCONSTANT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REAL_LIT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setImage(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void booleanConstant() throws ParseException {
                          /*@bgen(jjtree) booleanConstant */
                          SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANCONSTANT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setImage(t.image);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.setImage(t.image);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void stringConstant() throws ParseException {
                         /*@bgen(jjtree) stringConstant */
                         SimpleNode jjtn000 = new SimpleNode(JJTSTRINGCONSTANT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LIT);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Error() throws ParseException {
    jj_consume_token(ERROR);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CDBTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3c0e2000,0x3c0e2000,0x3c0e2000,0xe0000,0x3c0e2000,0x0,0x18000,0x0,0x3c0e2000,0x3c0e2000,0x3c0e2000,0x3c0e2000,0x4000,0x3c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x18000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200000,0x200000,0x200000,0x0,0x220000,0x200000,0x1e08400,0x200000,0x220000,0x220000,0x220000,0x220000,0x0,0x0,0x40,0x3f,0x3f,0x100600,0x100600,0x81800,0x81800,0x1e08400,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public CDB(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CDB(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CDBTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CDB(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CDBTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CDB(CDBTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CDBTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
